#summary tun2socks - socksify TCP at the network layer
#labels tun,socks,ssh,tunnel,vpn,socksify,tcp,proxify

= Introduction =

`tun2socks` is used to "socksify" TCP connections at the network layer. It implements a TUN device which accepts all incoming TCP connections (regardless of destination IP), and forwards them through a SOCKS server. This allows you to forward *all* connections through SOCKS, without any need for application support. It can be used, for example, to forward connections through a remote SSH server.

= Installation =

`tun2socks` is part of BadVPN. If you're on Linux, just build BadVPN with its CMake build system (or use the Gentoo overlay or the Arch AUR package). Note that you need the NSS and OpenSSL libraries to do that. Alternatively, you can use a shell script to compile `tun2socks` only, in case the CMake or library dependencies are problematic for you: http://badvpn.googlecode.com/svn/trunk/compile-tun2sock.sh . If you're on Windows, simply grab the Windows build of BadVPN.

= Example (tunelling through SSH) =

First create a TUN device:

  * On Linux, use `openvpn --mktun --dev tun0 --user <someuser>`.
  * On Windows, install OpenVPN (or, if you already have it, click the start menu shortcut that creates a new TAP-Win32 device). The new device will appear in `Network Adapters` and will be identifiable by its `Device Name` field (saying Tap-Win32 something).

Configure IP for the device: assign IP address 10.0.0.1, netmask 255.255.255.0.

Now start the program (on Linux, run it as `<someuser>`):
{{{
badvpn-tun2socks --tundev <tun_spec> --netif-ipaddr 10.0.0.2 --netif-netmask 255.255.255.0 --socks-server-addr 127.0.0.1:1080
}}}

where `<tun_spec>` is:

  * on Linux, `tun0`,
  * on Windows, `"tap0901:<human_name_of_TUN_device>:10.0.0.1:10.0.0.0:255.255.255.0"` (the three numbers are TUN interface IP address, network, and subnet mask).

NOTE: `--netif-ipaddr 10.0.0.2` is not a typo. It specifies the IP address of the virtual router inside the TUN device, and must be different than the IP of the TUN interface itself.

Now you should be able to ping the virtual router's IP (`10.0.0.2`).

Connect to the SSH server, passing `-D localhost:1080` to the `ssh` command to enable dynamic forwarding. This will make `ssh` open a local SOCKS server which `badvpn-tun2socks` will use.
If you use Putty, go to Connection->SSH->Tunnels, type `1080` in `Source port`, choose `Dynamic` and click `Add`.

All that remains is to route connections through the TUN device instead of the existing default gateway. This is done as follows:

  # Add a route to the SSH server through your existing gateway, with a lower metric than the original default route.
  # If your DNS servers are in the Internet (rather than your local network), also add routes for them (like for the SSH server). This is needed because `tun2socks` does not forward UDP by default (see below).
  # Add default route through the virtual router in the TUN device, with a lower metric than the original default route, but higher than the SSH and DNS routes.

This will make all external connections go through the TUN device, except for the SSH connection (else SSH would go through the TUN device, which would go through... SSH).

For example (assuming there are no existing default routes with metric <=6; otherwise remove them or change their metrics), in Linux:

{{{
route add <IP_of_SSH_server> gw <IP_of_original_gateway> metric 5
<same for DNS>
route add default gw 10.0.0.2 metric 6
}}}

Or on Windows (NOTE: `tun2socks` must be running and the interface of the default gateway must be working for these to succeed):

{{{
route add <IP_of_SSH_server> <IP_of_original_gateway> metric 5
<same for DNS>
route add 0.0.0.0 mask 0.0.0.0 10.0.0.2 metric 6
}}}


These routes will not persist across a reboot. You should probably make scripts that install and remove them. You can remove a route by changing the `add` to `del` or `delete`, depending on whether you're in Linux or Windows.

= UDP forwarding =

`tun2socks` can forward UDP, however this requires a daemon, `badvpn-udpgw` to run on the remote SSH server. To enable UDP forwarding:

  # On the remote SSH server, start: `badvpn-udpgw --listen-addr 127.0.0.1:7300`
  # Add the following arguments to `badvpn-tun2socks`: `--udpgw-remote-server-addr 127.0.0.1:7300`