#summary NCD request server

= Introduction =

The [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/sys_request_server.c sys.request_server()] module in NCD provides an interface for client programs on the same system to communicate with the NCD process.

= Example server =

{{{
process main {
    # Start the request server. Will start a request_handler process
    # for every request received.
    sys.request_server("/home/ambro/request.socket", "request_handler", {});
}

template request_handler {
    # Verify format of request data.
    value(_request.data) val;
    try("verify_request", {"_caller.val"}) t;

    # If verification failed, reply error.
    choose({{t.succeeded, "<none>"}}, "bad_request") func;
    call(func, {});

    # Determine request type.
    val->get("0") cmd;
    strcmp(cmd, "ping") is_ping;
    strcmp(cmd, "halt") is_halt;
    strcmp(cmd, "reboot") is_reboot;

    # Dispatch based on request type.
    choose({{is_ping, "ping_request"}, {is_halt, "halt_request"}, {is_reboot, "reboot_request"}}, "unknown_request") func;
    call(func, {});
}

template ping_request {
    _caller._request->reply({"OK", "Pong."});
    _caller._request->finish();
}

template halt_request {
    # runonce({"/sbin/halt"});
    _caller._request->reply({"OK", "Halting."});
    _caller._request->finish();
}

template unknown_request {
    _caller._request->reply({"Error", "Unknown request."});
    _caller._request->finish();
}

template bad_request {
    _caller._request->reply({"Error", "Bad request."});
    _caller._request->finish();
}

# called from try() to verify the request format.
# If an assertion fails, this immediately de-executes and
# the try() statement reports succeeded=false. Othersise,
# this de-executes once it completes, and reports succeeded=trye.
template verify_request {
    alias(_arg0) val;

    # Request payload must be a list...
    strcmp(val.type, "list") a;
    _try->assert(a);

    # ...with one element...
    strcmp(val.length, "1") a;
    _try->assert(a);

    # ...which is a string.
    val->get("0") cmd;
    strcmp(cmd.type, "string") a;
    _try->assert(a);
}
}}}

Whenever a request from a client is received, a new `request_handler` process is created to handle it. There, the request data sent by the client is accessed via `_request.data`, and replies can be sent using `_request.reply()` and `_request.finish()`. The request handler code uses the [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/value.c value()] and [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/try.c try()] commands to check the format of the request.

= Usage =

{{{
$ badvpn-ncd-request /home/ambro/request.socket '{}'
{"Error", "Bad request."}
$ badvpn-ncd-request /home/ambro/request.socket '{"Hello"}'
{"Error", "Unknown request."}
$ badvpn-ncd-request /home/ambro/request.socket '{"ping"}'
{"OK", "Pong."}
$ badvpn-ncd-request /home/ambro/request.socket '{"halt"}'
{"OK", "Halting."}
}}}