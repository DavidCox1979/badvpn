#summary NCD - powerful and extensible network interface configuration
#labels linux,network,interface,configuration,hotplug,dhcp,flexible,powerful

= Contents =

<wiki:toc max_depth="2" />

= Introduction =

NCD, the Network Configuration Daemon, is a daemon and programming/scripting language for configuration of network interfaces and other aspects of the operating system. It implements various functionalities as built-in modules, which may be used from an NCD program wherever and for whatever purpose the user needs them. This modularity makes NCD extremely flexible and extensible. It does a very good job with hotplugging in various forms, like USB network interfaces and link detection for wired devices. New features can be added by implementing statements as C-language modules using a straightforward interface.

NCD is only available for Linux. It is included in the BadVPN software package.

= Why ? =

If you use Linux on a desktop system, you must have heard of a program called !NetworkManager. It is a program that is meant to take care of network configuration on the OS. It is designed to be extremely easy and simple to use; it has a GUI with a wireless network list, easy wireless and IP configuration, support for VPN, etc..

This all seems good. Until you want to use two VPNs at the same time. Or add some nontrivial iptables rules. Or tell it not to mess with the network interface called eth1. Or setup a bridge interface. Basically, it's a hardcoded mess, and if you want it to do something the designers haven't specifically foreseen and implemented, better go crying right away.

Other network configuration frameworks have similar problems. The Gentoo init scripts, for example, can't even do DHCP right (it times out and forgets about the interface forever)!

My conclusion was that, for more powerful and extensible network configuration, the existing systems need to be thrown away; a new system better suited to the needs of power users needs to be designed. So here comes NCD!

= Basics =

NCD is used by writing an NCD program (the "configuration file"), then starting the `badvpn-ncd` program as a daemon (usually at system boot time). NCD will then keep running the supplied program, until it is requested to terminate (usually at shutdown time). NCD is designed to work in the background without any need to communicate with the user, and to automatically recover from any transient problems. The goal is to make things (e.g. network access) "just work", while still allowing dynamic and complex configuration.

= Model of execution =

An NCD program (see example below) consists of a set of so-called *processes*. Globally, the processes can be considered to execute concurrently. Each process consists of a list of *statements*.

When NCD starts up, all statements are *uninitialized*. Then the first statement in every process is *initialized*. An initialized statement is first in the *down* state. It may at any time transition into the *up* state. When it does so, the next statement in the process is initialized, and when this one transitions up, the next one is initialized, etc..

A statement (A) that is initialized and up can, at any time, go back into the down state. When this happens, NCD will cease initializing statements in the containing process, and will begin *deinitializing* statements, from the *bottom up*, until all statements following statement A are uninitialized; it will then wait for the offending statement A to go back up, and continue initializing statements from that point.

The actions performed by the statement when it is initialized and deinitialized, and the conditions that make it transition up and down, depend on the particular kind of statement. Often, the deinitialization of a statement has the *reverse effect* of initialization; for example, if a statement added a routing table entry on initialization, it may remove this same routing table entry on deinitialization. This design is very suitable for various configuration tasks, as it avoids possible leaks. It makes it trivially easy to, for example, make sure than when a network cable is pulled out, any associated routes and IP addresses are automatically removed.

When a statement is initialized, it is provided with a list of *arguments* which tell the underlying module specifically what it is supposed to do. Arguments can either be provided literally in the statement specification, or they may refer to *variables*, whose values are provided by preceding statements in the process. Variables are key to the power of NCD.

A statement is specified as `statement(arg1, ..., argN);`. Optionally, it can be given an identifier: `statement(arg1, ..., argN) identifier;`.

In NCD, data is stored and passed as so-called *values*. For example, arguments passed to statements are instantiated to values. A value is pure data; there is no such thing as a reference or pointer in NCD. There are three kinds of values:
  # *Strings*. A string is a sequence of bytes, excluding the zero byte. It can be specified literally as `"string contents"`. To include the double quote or backslash in a string, prefix it with a backslash. All other characters must be specified directly without escaping (including newlines).
  # *Lists*. A list is an ordered set of zero of more values (recursively, which may themselves be any of the three types of values). A list can be specified literally as `{value1, ..., valueN}`.
  # *Maps*. A map is a set of (key, value) pairs, with unique keys. Both the key and the value can be any kind of value, recursively. This means that the key can in fact be a list or even a map itself, and is is possible to have keys of different types in a map. A map can be specified literally as `[key1:value1, ..., keyN:valueN]`.

A variable is passed to a statement by passing `object.variable` as an argument directly or part of an argument expression (e.g. a list `{obj1.var1, obj2.var2}`). Here, `object` is an identifier of one of the statements in the process, declared somewhere above (later statements with that name shadow the earlier); `variable` is the name of the variable within this statement. Additionally, if only `object` is passed, it refers to the empty string variable within `object` (if the object even exports one).

When NCD is requested to terminate, it starts deinitializing all processes from the bottom up, like described above, and this deinitialization continues until all statements in all processes are deinitialized. NCD then exits.

The NCD language does provides some control constructs, like `If` and `Foreach`. However, these are internally implemented as syntax sugar and are translated to statements (and process templates, to be discussed later). As such, they are still subject to the above described execution model.

= Complete example =

This is an example NCD program that works with a single wired network interface and uses DHCP to obtain the IP address, default route and DNS servers.

{{{
process lan {
    # Set device.
    var("eth0") dev;

    # Wait for device, set it up, and wait for network cable.
    net.backend.waitdevice(dev);
    net.up(dev);
    net.backend.waitlink(dev);

    # DHCP configuration.
    # net.ipv4.dhcp() will block here until it obtaines an IP address.
    # Note that it will only obtain the IP address, and *not* assign it;
    # we do that with a separate command below.
    net.ipv4.dhcp(dev) dhcp;

    # Check IP address - make sure it's not local.
    # If you have other reserved subnets around, check for those too.
    ip_in_network(dhcp.addr, "127.0.0.0", "8") test_local;
    ifnot(test_local);

    # Assign IP address, as obtained by DHCP.
    net.ipv4.addr(dev, dhcp.addr, dhcp.prefix);

    # Add default route, as obtained by DHCP.
    net.ipv4.route("0.0.0.0", "0", dhcp.gateway, "20", dev);

    # Configure DNS servers, as obtained by DHCP.
    net.dns(dhcp.dns_servers, "20");
}
}}}

The above code, when read from top to bottom, simply specifies which operations are to be performed in order to reach the desired state. However note that each NCD program has an implicit deinitialization semantic. Here, for instance, pulling the network cable out will **automatically** remove the DNS servers, remove the default route and remove the IP address from the network interface.

= More examples =

See [NCD_examples] for more complex examples. NCD is capable of much more than the above program may suggest. For example, it can handle multiple network interfaces with priorities for Internet access, it can work with wireless networks and BadVPN network interfaces.

There is also an alternative introduction to NCD, and more examples, which include BadVPN interfaces: http://code.google.com/p/badvpn/source/browse/trunk/ncd/README .

= Graphical interface =

A user-friendly network configuration system employing the NCD programming language and a GUI is being worked on. See the [http://code.google.com/p/ncdgui/ ncdgui] project. However, note that this is not a GUI to NCD itself (that does not make sense, as does not making a GUI to any other programming language), but to a program written in NCD that is programmed to work with a GUI.

= Requirements =

NCD requires various programs during execution. In particular:

  * *iproute2* (`ip` command) is needed by the `net.up`, `net.ipv4.addr` and `net.ipv4.route` modules. Not all distributions come with that; Gentoo for example doesn't.

  * *udev >=171* is needed for `net.backend.waitdevice` and `net.watch_interfaces`.

= Running it =

For installation instructions see [Installation].

== Disabling existing network configuration ==

Before you start NCD, you have to stop any existing network configuration system to avoid interference.

  * Gentoo: stop `NetworkManager` init script, stop `net.` init scripts, except `net.lo`.
  * Ubuntu: stop !NetworkManager using `initctl stop network-manager`

Also, !NetworkManager has a habit of not deconfiguring interfaces when stopped. If you had !NetworkManager running:

  * Kill dhclient: `killall dhclient`
  * Remove IP addresses: `ip addr del <addr>/<prefix> dev <iface>`
  * Set down: `ip link set <iface> down`

== Testing from command line == 

Once you're sure your interfaces are deconfigured and there is nothing that could interfere, then try the program (`/etc/ncd.conf`) out by running (as root):
{{{
badvpn-ncd --config-file /etc/ncd.conf
}}}

NCD will print status messages as it executes your program. If it's not working as expected, these can help you with debugging it.

== Automatically ==

If you installed BadVPN via a package manager, NCD is integrated into your distro's init system, to use `/etc/ncd.conf` as the NCD program. To use NCD by default, you will have to permanently disable existing network configurations, and have NCD start on boot instead.

To disable existing network configurations:

  * Gentoo: Disable `NetworkManager` init script. Delete `net.` init scripts (which are symlinks to `net.lo`), except `net.lo` itself, to prevent Gentoo from autoconfiguring interfaces.
  * Ubuntu: Disable !NetworkManager by editing `/etc/init/network-manager.conf`, commenting the two `start on` lines, or by uninstalling the `network-manager` package.

To have NCD start on boot:

  * Gentoo: Enable the `/etc/init.d/badvpn-ncd` init script: `rc-update add badvpn-ncd default`
  * Arch: Enable the `/etc/rc.d/badvpn-ncd` init script by adding it to `DAEMONS` in `/etc/rc.conf`. Make sure it comes after syslog.
  * Ubuntu: Use the `/etc/init/badvpn-ncd.conf` Upstart script. The script is disabled by default; the `start on` line inside it is commented out. Uncomment it to have it start on boot. However be aware that `apt-get` will start it regardless when it installs the `badvpn` package (the default `/etc/ncd.conf` is a no-op to avoid damage here). You can also manually control the service using `initctl <start/stop/restart/status> badvpn-ncd`. 

= Module documentation =

Individual statement types (modules) are described briefly in the headers of their source files, under ncd/modules/ in the BadVPN source code: http://code.google.com/p/badvpn/source/browse/#svn%2Ftrunk%2Fncd%2Fmodules .

= NCD lanaguage introduction =

Here's a quick introduction to the programming language of NCD.

While the NCD language was designed for programming dynamic configurations in a partially declarative style, it has some support for imperative programming, for cases when the integrated high-level commands do not suffice. NCD is in fact [NCDTuringMachine turing complete].

== Diagnostic output ==

The [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/print.c println() and rprintln()] statements provide diagnostic output to standard output. `println()` prints a message on initialization, and `rprintln()` prints a message on deinitialization.

{{{
process foo {
    println("Starting up, please wait...");
    rprintln("Goodbye World!");

    sleep("500", "300"); # sleeps 500ms on init and 300ms on deinit

    println("Hello World!");
    rprintln("Shutting down, please wait...");
}
}}}

This should result in something like this:
{{{
$ badvpn-ncd --loglevel warning --config-file hello.ncd
Starting up, please wait...
< 500ms passes >
Hello World!
< you hit CTRL+C >
Shutting down, please wait...
< 300ms passes >
Goodbye World!
$ 
}}}

== Dependencies ==

The [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/depend.c provide() and depend()] statements implement dependencies.

Suppose we want to wait for a network device, and have some kind of service that works with it:

{{{
process foo {
    var("eth1") dev;
    net.backend.waitdevice(dev);

    println("X: started on device ", dev);
    rprintln("X: stopped on device ", dev);

    # do something with device...
}
}}}

However, what if, after the device is available, we want to run _two services in parallel_?

{{{
process foo {
    var("eth1") dev;
    net.backend.waitdevice(dev);

    provide("DEVICE");
}

process device_service_x {
    depend("DEVICE") dep;

    println("X: started on device ", dep.dev);
    rprintln("X: stopped on device ", dep.dev);

    # do something with device...
}

process device_service_y {
    depend("DEVICE") dep;

    println("Y: started on device ", dep.dev);
    rprintln("Y: stopped on device ", dep.dev);

    # do something with device...
}
}}}

Note how the service processes access the `dev` variable within process `foo` through the dependency. A `depend()` allows access to any variable as seen from the point of the matched `provide()`.

Because of how the NCD interpreter works, `provide()` should usually be the *last statement* in a process. Otherwise, when something before `provide()` goes down, a latter statement could take some time to deinitialize, and during this time, the depending processes may continue initalizing and may request variables through their `depend()`-s - which will fail, because `provide()` is scheduled for deinitialization and cant't resolve variables.

If you wanted to have some statements after a `provide()`, you should instead make a new process that `depend()`-s on this same `provide()` and put the statements there.

There are however exceptions to this rule. For example, the following code wakes up two parallel processes, but then merges back. It's safe because when process `main` is requested to terminate after it merged back, the two parallel processes have initialized completely and won't resolve any variables.

{{{
process main {
    var("eth1") dev;
    net.backend.waitdevice(dev);

    provide("DEVICE");
    depend("X_DONE");
    depend("Y_DONE");

    println("up");
    rprintln("down");
}

process device_service_x {
    depend("DEVICE") dep;

    println("X: started on device ", dep.dev);
    rprintln("X: stopped on device ", dep.dev);

    sleep("1000", "2000");

    provide("X_DONE");
}

process device_service_y {
    depend("DEVICE") dep;

    println("Y: started on device ", dep.dev);
    rprintln("Y: stopped on device ", dep.dev);

    sleep("2000", "1000");

    provide("Y_DONE");
}

}}}

== Branching ==

The latest version of NCD (1.999.120) provides an `If` clause as a special kind of statement:

{{{
process main {
    var("anything-but-true") x;
    var("true") y;
    var("Got ") outside;

    If (x) {
        println(outside, "X");
        var("A") choice;
    } elif (y) {
        println(outside, "Y");
        var("B") choice;
    } else {
        println(outside, "none");
        var("C") choice;
    } branch;

    println("Choice: ", branch.choice);
}
}}}

{{{
$ badvpn-ncd --loglevel warning --config-file if_example.ncd
Got Y
Choice: B
}}}

Note that the `If` keyword begins with a capital `I`. You can use any number of `elif` parts, and optionally an `else` part. The clause (unlike in many other languages) must be terminated with a semicolon. The condition arguments to `If` and `elif` must be strings, and are considered true only if they are equal to "true".

Code inside the clause can directly access objects above it, like the example accesses the variable `outside`. You can also give the clause a name just before the semicolon; this will allow you to access objects within the branch that was taken - the example above does this when printing `branch.choice`.

The `If` clause is internally implemented as syntax sugar around the [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/call2.c embcall2_multif()] statement (read on about templates and `call()` to see how that works).

== Process templates ==

Many of NCD's execution control features rely on a feature called *process templates*. A process template is written like a process, but using the `template` keyword instead of `process`. Unlike a regular process, which starts up automatically and is terminated automatically on NCD shutdown, a process template by itself does nothing. Instead, special statements are used to dynamically create *template processes* out of process templates.

{{{
# Does nothing by itself.
template my_template {
    println("If I'm saying this, I'm running from a template process!");
}
}}}

A template process, however, is an *actual process*; its code is that of the process template is was created from. Unlike regular processes, template processes do not terminate automatically when NCD is requested to shut down; termination of a template process needs to be requested by its controlling code (often by the same statement that created it).

Because all template processes created out of the same process template have the same code, there needs to be a way to distinguish them. All statements that create template processes take a list of arguments, which is accessible from resulting template processes via `_argN` special variables. Additionally, the code creating a template process can provide other special variables.

Some statements that create template processes are `call()`, `foreach()` and `process_manager()`. Read on to learn about them.

== Calling templates ==

The effect of [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/call.c call()] is mostly equivalent to embedding the body of the called process template into the place of `call()`, including correct reverse execution.

{{{
process foo {
    println("Saying hello...");
    call("say_hello", {});
    println("Successfully said hello!");
}

template say_hello {
    println("Hello!");
    rprintln("Goodbye...");
}
}}}

Additionally, with `call()`, you can:
  * Pass arguments to the template process. These can be accessed from the template process via the `_argN` special variables (N-th argument, starting with zero), and the `_args` special variable (list of arguments).
  * Access caller's objects from within the called template process via `_caller`.
  * Once the called template process has initialized, access its objects through the name of the `call()` statement.

The following example demonstrates these features.

{{{
process foo {
    var("Hello") x;
    call("make_msg", {"Good", "World"}) c;
    println(c.msg); # Prints: HelloGoodWorld
}

template make_msg {
    concat(_caller.x, _arg0, _arg1) msg;
}
}}}

Note that it is impossible to define new statements from within the NCD programming language. The only way to define a new statement is to extend NCD by implementing the statement in C language using NCD's module interface. However, when considering a new statement, you should always first try to implement the same functionality in the NCD programming language, which would usually involve using process templates in some way.

You can compare the NCD interpreter and its programming language to a CPU and its machine language. Similarly to how you can't add new machine instructions to the CPU without changing its hardware (or microcode), you can't add new statements to NCD without changing its source code. On the other hand, like you _can_ write subroutines and call them using machine instructions, you can write process templates for NCD and call them using the `call()` statement.

== Branching with call()  ==

The `call()` statement can be used for branching, in addition to the `If` clause described above. You can branch using `call()` by building the name of the called template dynamically based on runtime values. The following program demonstrates this.

{{{
process test {
   # We will be branching based on the value of 'x' here.
   # If 'x' equals "foo", we go one way, else the other way.
   var("bar") x;

   # Produce a value which is either "true" or "false", indicating
   # which way to branch.
   strcmp(x, "foo") is_foo;

   # Build template name based on the value of is_foo.
   concat("branch_foo_", is_foo) branch_template;

   # Branch.
   call(branch_template, {}) c;

   # Print the message.
   println(c.msg);
}

template branch_foo_true {
    var("x was foo!") msg;
}

template branch_foo_false {
    var("x was NOT foo!") msg;
}
}}}

Branching using `call()` may sometimes be preferable to the `If` clause because the branched code is specified externally to the calling process. However, note that the `If` clause is internally translated to a statement similar to `call()`.

== Multi-way branching ==

The [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/choose.c choose()] statement together with `call()` can provide "if, else if, ..., else" style branching, if for some reason you want to avoid the `If` clause.

{{{
process foo {
    var("false") is_x;
    var("true") is_y;
    var("false") is_z;

    # If is_x then do_x, else if is_y then do_y, else if is_z then do_z, else do_other.
    choose({{is_x, "do_x"}, {is_y, "do_y"}, {is_z, "do_z"}}, "do_other") func;
    call(func, {});
}

template do_x {
    println("Doing x");
}

template do_y {
    println("Doing y");
}

template do_z {
    println("Doing z");
}

template do_other {
    println("Doing other");
}
}}}

== One-way branching ==

It is possible to do a one-way branch by giving `call()` `"<none>"` as the template name to make it do nothing, possibly using `choose()`:

{{{
process foo {
    var("false") is_x;

    # If is_x, then call do_x, else do nothing.
    choose({{is_x, "do_x"}}, "<none>") func;
    call(func, {});
}

template do_x {
    println("Doing x");
}
}}}

== Foreach ==

[http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/foreach.c foreach()] does something for each element of a list or map. It is mostly equivalent to putting multiple `call()` statements one after another, but it allows the elements to be specified dynamically in form of a list.

{{{
process foo {
    var("World") world;
    foreach({"A", "B", "C"}, "foreach_func_list", {"Hello", "Goodbye"});
    foreach(["a":"1", "b":"2"], "foreach_func_map", {"Hello", "Goodbye"});
    println("Everyone said hello!");
}

template foreach_func_list {
    var(_arg0) hello;
    var(_arg1) goodbye;

    println(_elem, ": ", hello, _caller.world);
    rprintln(_elem, ": ", goodbye, _caller.world);
}

template foreach_func_map {
    var(_arg0) hello;
    var(_arg1) goodbye;

    println(_key, "=", _val, ": ", hello, _caller.world);
    rprintln(_key, "=", _val, ": ", goodbye, _caller.world);
}
}}}

This results in the following:

{{{
A: HelloWorld
B: HelloWorld
C: HelloWorld
a=1: HelloWorld
b=2: HelloWorld
Everyone said hello!
< you hit CTRL+C >
b=2: GoodbyeWorld
a=1: GoodbyeWorld
C: GoodbyeWorld
B: GoodbyeWorld
A: GoodbyeWorld
}}}

The template process created by `foreach()` for every element of the list can access the current element using `_elem`, or in case of a map using `_key` and `_val`. Additionally, like `call()`, it can access arguments passed to `foreach()`, and any variable or object `X` as seen from the point of `foreach()` via `_caller.X`.

Maps are always iterated as if they were sorted by keys; the order of the keys is [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/valuemetic.c the usual value order].

The template processes are managed by `foreach()` in the same way as the NCD interpreter initializes and deinitializes statements within a process. In particular, if a statement in one of the template processes goes down, `foreach()` will pause this process, deinitialize any following processes from the bottom up, and only then continue the process where a statement went down (assuming no prior statements went down).

This means that you can use `foreach()` to acquire a set of resources at once. For example, to wait for to all network interfaces on a list to appear:

{{{
process foo {
    list("eth0", "eth1") ifaces;
    foreach(ifaces, "wait_link", {});

    println("all devices exits");
    rprintln("all devices no longer exist (or terminating)");

    # Configure those interfaces all at once here.
}

template wait_device {
    net.backend.waitdevice(_elem);
}
}}}

NCD also provides the `Foreach` clause which does not require explicitly creating a process template:

{{{
process main {
    var({"A", "B", "C"}) list;
    value(["a":"1", "b":"2"]) map;

    # Iterate list elements.
    Foreach (list As elem) {
        println(elem);
    };

    # Iterate list elements and indices (zero-based).
    Foreach (list As index:elem) {
        println("at ", index, ": ", elem);
    };

    # Iterate map keys.
    Foreach (map As key) {
        map->get(key) val; # use value::get() to retrieve the value
        println("key=", key, " val=", val);
    };

    # Iterate map keys and values.
    Foreach (map As key:val) {
        println("key=", key, " val=", val);
    };
}
}}}

The `Foreach` clause behaves very similarly to the `foreach()` statement. In particular, when `Foreach` is finished, there is a fully initialized process corresponding to each iteration step. In fact, `Foreach` is internally implemented by translating into the `foreach_emb()` clause.

== Method-like statements ==

Note how the arguments of statements in NCD are restricted to plain data, and there is no concept of a reference to an object. Sometimes, however, it is needed for two or more statements to cooperate in their implementation, and you might need to tell one statement which existing related statement to cooperate with.

NCD solves this with *method-like statements*. These statements are just like regular statements, except that they refer to some existing statement, and their implementation uses this information somehow. A method-like statement is written by preceding the method name with an object identifier and an arrow `->`. The following example demonstrates the [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/list.c list]::contains() statement.

{{{
process foo {
    list("First", "Second", "Third") l;
    l->contains("Second") c_second;
    println(c_second); # Prints: true
    l->contains("Fourth") c_fourth;
    println(c_fourth); # Prints: false
}
}}}

Note that the `list::contains()` statements here only use the referred list object when they initialize, and not after that. In general, however, method-like statements can cooperate with the referred object however long they like; they can also go up and down like regular statements can.

The restriction on arguments being plain data applies not only to statement arguments, but on template process arguments too. For example, the following code is *incorrect*:

{{{
process foo {
    # Make a list object using the list() statement.
    # http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/list.c
    list("First", "Second") l;

    # Call a template, which supposedly operates on the list object (not).
    # Here, "l" really means "value of variable named (empty string) in object l".
    # The value is a list value, per documentation of list().
    call("contains", {l, "Second"}) c;

    println(c.result);
}

template contains {
    # Incorrect; there is no object named _arg0! (but there is a special *variable* named _arg0)
    _arg0->contains(_arg1) result;
}
}}}

In this case, the error can be corrected by having the template process construct its own list object:

{{{
process foo {
    list("First", "Second") l;
    call("contains", {l, "Second"}) c;
    println(c.result);
}

template contains {
    listfrom(_arg0) mylist; # like list(), only it concatenates the list arguments
    mylist->contains(_arg1) result; # all good: mylist is a list object with ::contains method
}
}}}

On the other hand, if it's truly necessary to invoke a method-like statement on an object of the caller, this can be done by going through `_caller`:

{{{
process foo {
    list("First", "Second") l;
    call("contains", {"Second"}) c;
    println(c.result);
}

template contains {
    _caller.l->contains(_arg0) result;
}
}}}

It's easy to see that how the above approach is clumsy to work with, because the template expects the object to have a predefined name. This can be fixed using the `alias()` statement, described next.

== Aliases ==

The [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/alias.c alias()] statement allows a group of variables and objects to be referred to using a new name.

{{{
process foo {
    list("hello", "world") x;
    alias("x") y;
    concatv(y) msg;
    println(msg, y.length); # Prints: helloworld2
    y->contains("world") c; # Method calls are forwarded too.
    println(c);
}
}}}

Notice how the target of the alias is given as a string. When the `alias()` statement initializes, the target is not resolved in any way. In fact, all that `alias()` does is forward variable and object resolution requests by prepending the target string, plus possibly a dot, to the requested name, and resolving it from its point of view.

An important use of `alias()` is to simulate passing actual objects through a `call()` (compared to passing just data), such that the called process can invoke the object's methods. Here's the last example from the description of `call()`, fixed to allow specifying the object name:

{{{
process foo {
    list("First", "Second") l;
    call("contains", {"_caller.l", "Second"}) c;
    println(c.result);
}

template contains {
    alias(_arg0) passed_list;
    passed_list->contains(_arg1) result;
}
}}}

There is currently a small bug in the `alias()` implementation which makes it impossible to have an alias to a variable within an object:

{{{
process foo {
    list("first", "second") l;
    println(l.length); # 2
    alias("l.length") a;
    println(a); # error!
}
}}}

However, this only applies when referred name within an object (`length` in the case above) is a "final" variable, rather than just pointing to another object. E.g. it is safe to refer to objects within a `call()` statement.

In general, aliases can be used to specify the arguments a process template takes. As was just demonstrated, they can simulate passing objects, but can also serve as a more efficient alternative to `var()` for passing non-object arguments:

{{{
process main {
    list("foobar") list;
    call("do_something", {"foo", "bar", "_caller.list"}) c;
    println(c.result);
}

template do_something {
    alias("_arg0") s1;
    alias("_arg1") s2;
    alias(_arg2) list;

    concat(s1, s2) s;
    list->contains(s) result;
}
}}}

== Multi-dependencies ==

The [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/multidepend.c multiprovide() and multidepend()] statements implement dependencies similar to `provide()` and `depend()`. Contrary to `provide()`, which will shout errors if another `provide()` for the same name is already active, it is possible to have multiple parallel `multiprovide()`s satisfying a single `multidepend()`. On the other side, a `multidepend()` will always attempt to bind itself to one of the `multiprovide()`s that satisfy it. It will always choose the best one based on its preference list, possibly un-binding itself from an existing `multiprovide()`.

The following example illustrates the behavior of `multiprovide()` and `multidepend()`:

{{{
process resource1 {
    var("Resource 1") name;
    sleep("2000", "0");
    multiprovide("RESOURCE_1");
}

process resource2 {
    var("Resource 2") name;
    sleep("4000", "0");
    multiprovide("RESOURCE_2");
}

process dependency {
    # I want either "RESOURCE_2" or "RESOURCE_1",
    # but I always prefer the former.
    multidepend({"RESOURCE_2", "RESOURCE_1"}) dep;

    println("Bound to ", dep.name);
    rprintln("Unbound from ", dep.name);
}
}}}

This will result in the following:

{{{
< NCD starts >
< 2 seconds pass >
Bound to Resource 1
< 2 more seconds pass >
Unbound from Resource 1
Bound to Resource 2
}}}

As can be seen, unlike `depend()`, which only goes down when its bound `provide()` is broken, `multidepend()` also goes down when a better `multiprovide()` comes in.

Note that the namespaces for dependency names of `provide()`/`depend()` and of `multiprovide()`/`multidepend()` are separate.

== Event-reporting modules ==

Many statements in NCD can be considered to report events. However, until now, events were reported only in form of a module going up or down. Some examples of this are `net.backend.waitdevice()`, `net.ipv4.dhcp()` and `depend()`. Sometimes, however, events may need to be treated as just events, without a natural correspondence to the up/down state of a statement.

General event reporting facilities in NCD are implemented in form of a statement which behaves as follows:

  # When an event occurs, the statement goes up and exposes the information about the event via its variables.
  # The statement has a `::nextevent()` method that is called to indicate that the current event has been handled; this makes the event reporting statement go back down, waiting for the next event.

The following example demonstrates the [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/sys_evdev.c sys_evdev()] statement, which reports events from a Linux event device (evdev).

{{{
process main {
    sys.evdev("/dev/input/by-id/usb-BTC_USB_Multimedia_Keyboard-event-kbd") evdev;
    println("Event: ", evdev.type, " ", evdev.value, " ", evdev.code);
    rprintln("... handled.");
    evdev->nextevent();
}
}}}

To run this, you have to provide an existing `-event-` (!) device, and you need read permission on the device. If all goes well, this will result in NCD spamming the console with something in form of the following (the values here correspond to what is defined in the `linux/input.h` header file):

{{{
Event: EV_MSC 458792 MSC_SCAN
... handled.
Event: EV_KEY 0 KEY_ENTER
... handled.
Event: EV_SYN 0 unknown
... handled.
}}}

Note how the above example executes in a conceptually different way to what has been demonstrated before. In previous examples, processes were meant to advance forward towards a goal, and only revert to a previous state when something goes wrong. In this case, however, the process reverts as soon as `nextevent()` is reached, deinitializing all statements between `nextevent()` and `sys.evdev()`. While it may not appear as such at first look, it is really a *loop*. (feel free to indent the statements following `sys.evdev()` if you like it better that way)

== Process manager ==

Event-reporting modules are not of much use without a useful way to handle events. The [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/process_manager.c process_manager()] module provides the ability to spawn new processes in response to events. The following example demonstrates the behavior of process_manager():

{{{
process foo {
    process_manager() mgr;
    rprintln("Destroying manager...");
    println("Starting A");
    mgr->start("processA", "template_for_A", {});
    println("Starting B");
    mgr->start("processB", "template_for_B", {});
    println("Started all!");
}

template template_for_A {
    println("A: starting");
    rprintln("A: died");
    sleep("1000", "1000");
    println("A: finished");
    rprintln("A: dying");
}

template template_for_B {
    println("B: starting");
    rprintln("B: died");
    sleep("2000", "2000");
    println("B: finished");
    rprintln("B: dying");
}
}}}

This will result in this:

{{{
$ badvpn-ncd --loglevel warning --config-file manager1.ncd
Starting A
A: starting
Starting B
B: starting
Started all!
< 1 second passes >
A: finished
< 1 second passes >
B: finished
< you hit CTRL+C >
Destroying manager...
B: dying
A: dying
< 1 second passes >
A: died
< 1 second passes >
B: died
$ 
}}}

See how start() creates a new process and gives control to it; however, as soon as the created process cannot continue (in this case, entering sleep()), control is returned to the process that called start(). In fact, start() is done after it has spawned the process - it will not do anything from that point on, and will *not* stop the process when deinitializing. Instead, process_manager() will stop its processes when deinitializing, waiting for them to terminate.

Processes created via process_manager() can also be stopped explicitly using the stop() method, by providing the same process identifier as in the corresponding start() call:

{{{
process foo {
    process_manager() mgr;
    mgr->start("processA", "template_for_A", {});
    mgr->stop("processA");
    println("Foo done.");
}

template template_for_A {
    println("A: starting");
    rprintln("A: died");
    sleep("1000", "3000");
    println("A: started"); # never called
}
}}}

This will produce the following:

{{{
$ badvpn-ncd --loglevel warning --config-file manager2.ncd
A: starting
Foo done.
< 3 seconds pass >
A: died
}}}

In this case, start() spawns the process, which proceeds to sleep(), at which point control is returned to the `foo` process. This one then  calls stop(), triggering the deinitialization of the process that was just spawned, requesting its sleep() statement to terminate. sleep() again returns control to `foo`, which prints "Foo done.". After 3 seconds, sleep() finally deinitializes.

== Handling events with process manager ==

process_manager() can be used in combination with event reporting modules, in particular with those that report the presence of hardware devices, to automatically create processes that configure them:

{{{
process main {
    process_manager() mgr;
    
    # Wait for network interface event (interface added/removed).
    net.watch_interfaces() watcher;

    println("Event: interface ", watcher.devname, " ", watcher.event_type);

    # Dispatch event.
    concat("interface_event_", watcher.event_type) func;
    call(func, {watcher.devname});

    # Finish handling this event.
    watcher->nextevent();
}

template interface_event_added {
    var(_arg0) dev;
    _caller.mgr->start(dev, "interface_worker", {dev});
}

template interface_event_removed {
    var(_arg0) dev;
    _caller.mgr->stop(dev);
}

template interface_worker {
    var(_arg0) dev;

    println(dev, ": starting");
    rprintln(dev, ": died");

    # Here comes your GENERIC interface configuration code.
}
}}}

This results in automatic starting and stopping of network interface configuration processes based which network interfaces exist in the system at any given time. Be aware that an `interface_worker` will be created for *all* network interfaces, including the loopback, wired and wireless interfaces. To configure them properly, branching must be used.

== Storing state ==

In NCD, simple configurations can be implemented in a declarative style without directly managing any state. To do complex things, however, it is often required to in part resort to imperative programming.

NCD provides two ways of storing state. For simple things, the [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/var.c var()] statement may suffice. `var()` takes as argument a single value an allows later access to this value via the empty string variable (i.e. the name of the `var()` statement). Additionally, `var()` has a `set()` method, which allows changing the stored value subsequently. The following example demonstrates listening for keyboard events while remembering the last event that has occurred, using `var()`.

{{{
process main {
    # Previous event is stored here.
    var("none") prev_event;

    # Wait for keyboard event.
    sys.evdev("/dev/input/by-id/usb-BTC_USB_Multimedia_Keyboard-event-kbd") evdev;

    # Build a value (list) representing the event.
    var({evdev.type, evdev.value, evdev.code}) event;

    # Print this and previous event.
    to_string(event) str1;
    to_string(prev_event) str2;
    println("Event: ", str1, " Previous: ", str2);

    # Update previous event.
    prev_event->set(event);

    # Wait for next event.
    evdev->nextevent();
}
}}}

This will resort in something like this:

{{{
$ badvpn-ncd --loglevel warning --config-file var_state.ncd
Event: {"EV_MSC", "458792", "MSC_SCAN"} Previous: "none"
Event: {"EV_KEY", "0", "KEY_ENTER"} Previous: {"EV_MSC", "458792", "MSC_SCAN"}
Event: {"EV_SYN", "0", "unknown"} Previous: {"EV_KEY", "0", "KEY_ENTER"}
Event: {"EV_MSC", "458760", "MSC_SCAN"} Previous: {"EV_SYN", "0", "unknown"}
Event: {"EV_KEY", "1", "KEY_E"} Previous: {"EV_MSC", "458760", "MSC_SCAN"}
Event: {"EV_SYN", "0", "unknown"} Previous: {"EV_KEY", "1", "KEY_E"}
Event: {"EV_MSC", "458760", "MSC_SCAN"} Previous: {"EV_SYN", "0", "unknown"}
Event: {"EV_KEY", "0", "KEY_E"} Previous: {"EV_MSC", "458760", "MSC_SCAN"}
Event: {"EV_SYN", "0", "unknown"} Previous: {"EV_KEY", "0", "KEY_E"}
}}}

The other, much more powerful, method of storing state is via the [http://code.google.com/p/badvpn/source/browse/trunk/ncd/modules/value.c value()] statement. Like `var()`, `value()` accepts a single argument, which it stores, and allows reading the stored value via the empty string variable. However, `value()` allows fine-grained access and modification of the stored value.

When a value object contains a list or a map, the `get()` method can be used to access the i-th element of the list, or the value corresponding a given key in a map. For lists and map, the value object also exports the `length` variable, indicating the number of elements.

{{{
process main {
    # Create a value object storing a list of three elements,
    # with the third element being a list of two.
    value({"First", "Second", {"Third.First", "Third.Second"}}) v;

    # Get the element at index 1.
    v->get("1") second;
    println(second); # Second

    # Get the element at index 2.
    v->get("2") third;

    # The result of get() is another value object, so if it is a list,
    # we can call get() on this one too.
    third->get("0") third_first;
    println(third_first); # Third.First

    # We can also check the length of a list.
    println(third.length); # 2
}
}}}

Note that the `get()` method will fail if the given list index or map key does not exist, and the process will not continue. To check for the existence of an element, the `try_get()` method should be used. `try_get()` is like `get()`, except that it will not fail if the element specified does not exist; rather, existence is reported via the `exists` variable. The following program demonstrates using `value()` with maps and checking for the existence of a key.

{{{
process main {
    # Create a value storing a map with two elements.
    value(["key1":"val1", "key2":"val2"]) v;

    # Get the value under "key1".
    v->get("key1") v1;
    println(v1.exists); # true (always, because we used get and not try_get)
    println(v1); # val1

    # Check for existence of "key3".
    v->try_get("key3") v3;
    println(v3.exists); # false

    # Branch based on existence.
    concat("exists_", v3.exists) func;
    call(func, {});
}

template exists_true {
    println("key3 exists and has the value ", _caller.v3);
}

template exists_false {
    println("key3 does not exist");

    # We must not do anything else with v3!
    # If "key3" did in fact exist, we could now use v3 as if
    # it was the result of get().
}
}}}